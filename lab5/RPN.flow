import runtime;
import ASTTree;
import string;
import lingo/pegcode/driver;
import Stack;
import maybe;

export{
    RPNGrammarOp : ref Maybe<[PegOp]>;

    RPNExpr ::= RPNInt, RPNAdd, RPNSub, RPNMul, RPNDiv;
    //Int structure was impoprted from ASTTree
    RPNInt : (i : int);
    RPNAdd : ();
    RPNSub : ();
    RPNMul : ();
    RPNDiv : ();

    createRPNGrammar() -> [PegOp];
    createRPNArray() -> [RPNExpr];
    printRPNExprArray(array : [RPNExpr]) -> void;
    createASTTreeFromRPNExprArray(array : [RPNExpr]) -> Maybe<Expr>;
    stringRPNExprFromArray(array : [RPNExpr]) -> string;
}

RPNExpr ::= RPNInt, RPNAdd, RPNSub, RPNMul, RPNDiv;
RPNInt : (i : int);
RPNAdd : ();
RPNSub : ();
RPNMul : ();
RPNDiv : ();

RPNGrammarOp : ref Maybe<[PegOp]> = ref None();

CreateArray(array : [flow]) -> [RPNExpr]{
    array[0];
}

createRPNGrammar() -> [PegOp]{
    onlyOnce(RPNGrammarOp, \ -> {
        compilePegGrammar("#include RPN.lingo");
    })
}


createRPNArray() -> [RPNExpr]{
    specialPegActions = {
        t1 = setTree(defaultPegActions.t, "CreateArray", CreateArray);
        SemanticActions(t1);
    }
    result : [RPNExpr] = parsic(createRPNGrammar(), "10 9 +", specialPegActions);
    result;
}

printComma(index : int, length : int){
    if(index < length - 1){
        " , ";
    }else{
        "";
    }
}

printRPNExprArrayFor(array : [RPNExpr], index : int) -> string{
    length : int = length(array);
    if(index < length){
        expr : RPNExpr = array[index];
        switch(expr){
                RPNInt(i) : {
                    i2s(i) + printComma(index, length) + printRPNExprArrayFor(array, index + 1);
                }
                RPNAdd() : {
                    "+" + printComma(index, length) + printRPNExprArrayFor(array, index + 1);
                }
                RPNSub() : {
                    "-" + printComma(index, length) + printRPNExprArrayFor(array, index + 1);
                }
                RPNMul() : {
                    "*" + printComma(index, length) + printRPNExprArrayFor(array, index + 1);
                }
                RPNDiv() : {
                    "/" + printComma(index, length) + printRPNExprArrayFor(array, index + 1);
                }
            }
    }else{
        "";
    }
}

printRPNExprArray(array : [RPNExpr]) -> void{
    init : string = "[ " + printRPNExprArrayFor(array, 0) + " ]";
    println(init);
}

printSpace(index : int, length : int){
    if(index < length - 1){
        " ";
    }else{
        "";
    }
}

stringRPNExprFromArrayFor(array : [RPNExpr], index : int){
    length : int = length(array);
    if(index < length){
        expr : RPNExpr = array[index];
        switch(expr){
                RPNInt(i) : {
                    i2s(i) + printSpace(index, length) + stringRPNExprFromArrayFor(array, index + 1);
                }
                RPNAdd() : {
                    "+" + printSpace(index, length) + stringRPNExprFromArrayFor(array, index + 1);
                }
                RPNSub() : {
                    "-" + printSpace(index, length) + stringRPNExprFromArrayFor(array, index + 1);
                }
                RPNMul() : {
                    "*" + printSpace(index, length) + stringRPNExprFromArrayFor(array, index + 1);
                }
                RPNDiv() : {
                    "/" + printSpace(index, length) + stringRPNExprFromArrayFor(array, index + 1);
                }
            }
    }else{
        "";
    }
}

stringRPNExprFromArray(array : [RPNExpr]) -> string{
    ret : string = stringRPNExprFromArrayFor(array, 0);
    ret;
}

for1(array : ref [RPNExpr], index : int, stack : Stack<Expr>, valid : int) -> int{
    if(valid == 1){
        if(index < length(^array))
        {
        validNext : ref int = ref 1;
        expr : RPNExpr = ^array[index];
        switch(expr){
        RPNInt(i) : {
            pushToStack(stack, Int(i));
            validNext := 1;
        }
        RPNAdd() : {
            expr2Maybe : Maybe<Expr> = popFromStack(stack);
            expr1Maybe : Maybe<Expr> = popFromStack(stack);
            if(isSome(expr1Maybe) && isSome(expr2Maybe)){
                expr1 : Expr = either(expr1Maybe, Int(0));
                expr2: Expr = either(expr2Maybe, Int(0));
                pushToStack(stack, Add(expr1, expr2));
                validNext := 1;
            }else{
                validNext := 0;
            }
        }
        RPNSub() : {
            expr2Maybe : Maybe<Expr> = popFromStack(stack);
            expr1Maybe : Maybe<Expr> = popFromStack(stack);
            if(isSome(expr1Maybe) && isSome(expr2Maybe)){
                expr1 : Expr = either(expr1Maybe, Int(0));
                expr2: Expr = either(expr2Maybe, Int(0));
                pushToStack(stack, Sub(expr1, expr2));
                validNext := 1;
            }else{
                validNext := 0;
            }
        }
        RPNMul() : {
            expr2Maybe : Maybe<Expr> = popFromStack(stack);
            expr1Maybe : Maybe<Expr> = popFromStack(stack);
            if(isSome(expr1Maybe) && isSome(expr2Maybe)){
                expr1 : Expr = either(expr1Maybe, Int(0));
                expr2: Expr = either(expr2Maybe, Int(0));
                pushToStack(stack, Mul(expr1, expr2));
                validNext := 1;
            }else{
                validNext := 0;
            }
        }
        RPNDiv() : {
            expr2Maybe : Maybe<Expr> = popFromStack(stack);
            expr1Maybe : Maybe<Expr> = popFromStack(stack);
            if(isSome(expr1Maybe) && isSome(expr2Maybe)){
                expr1 : Expr = either(expr1Maybe, Int(0));
                expr2: Expr = either(expr2Maybe, Int(0));
                pushToStack(stack, Div(expr1, expr2));
                validNext := 1;
            }else{
                validNext := 0;
            }
        }
        }
        for1(array, index + 1, stack, ^validNext);
        }else{
            1;
        }
    }else{
        0;
    }
}

createASTTreeFromRPNExprArray(array : [RPNExpr]) -> Maybe<Expr>{
    stack : Stack<Expr> = StackStruct(ref [], ref 0);
    index : int = 0;
    valid : int = 1;
    validRet : int = for1(ref array, index, stack, valid);
    if(validRet == valid){
        popFromStack(stack);
    }else{
        None();
    }
}
import runtime;
import string;
import lingo/pegcode/driver;
import Stack;
import maybe;

export{
    RPNGrammarOp : ref Maybe<[PegOp]>;

    RPNExpr ::= RPNInt, RPNAdd, RPNSub, RPNMul, RPNDiv, RPNRecAdd;
    RPNInt : (i : int);
    RPNAdd : ();
    RPNSub : ();
    RPNMul : ();
    RPNDiv : ();
    RPNRecAdd : ();

    createRPNGrammar() -> [PegOp];
    createRPNArray() -> [RPNExpr];
    printRPNExprArray(array : [RPNExpr]) -> void;
    stringRPNExprFromArray(array : [RPNExpr]) -> string;
}

RPNExpr ::= RPNInt, RPNAdd, RPNSub, RPNMul, RPNDiv, RPNRecAdd;
RPNInt : (i : int);
RPNAdd : ();
RPNSub : ();
RPNMul : ();
RPNDiv : ();
RPNRecAdd : ();

RPNGrammarOp : ref Maybe<[PegOp]> = ref None();

CreateArray(array : [flow]) -> [RPNExpr]{
    array[0];
}

createRPNGrammar() -> [PegOp]{
    onlyOnce(RPNGrammarOp, \ -> {
        compilePegGrammar("#include RPN.lingo");
    })
}


createRPNArray() -> [RPNExpr]{
    specialPegActions = {
        t1 = setTree(defaultPegActions.t, "CreateArray", CreateArray);
        SemanticActions(t1);
    }
    result : [RPNExpr] = parsic(createRPNGrammar(), "10 9 ~ -", specialPegActions);
    result;
}

printComma(index : int, length : int){
    if(index < length - 1){
        " , ";
    }else{
        "";
    }
}

printRPNExprArrayFor(array : [RPNExpr], index : int) -> string{
    length : int = length(array);
    if(index < length){
        expr : RPNExpr = array[index];
        switch(expr){
                RPNInt(i) : {
                    i2s(i) + printComma(index, length) + printRPNExprArrayFor(array, index + 1);
                }
                RPNAdd() : {
                    "+" + printComma(index, length) + printRPNExprArrayFor(array, index + 1);
                }
                RPNSub() : {
                    "-" + printComma(index, length) + printRPNExprArrayFor(array, index + 1);
                }
                RPNMul() : {
                    "*" + printComma(index, length) + printRPNExprArrayFor(array, index + 1);
                }
                RPNDiv() : {
                    "/" + printComma(index, length) + printRPNExprArrayFor(array, index + 1);
                }
                RPNRecAdd() : {
                    "~" + printComma(index, length) + printRPNExprArrayFor(array, index + 1);
                }
            }
    }else{
        "";
    }
}

printRPNExprArray(array : [RPNExpr]) -> void{
    init : string = "[ " + printRPNExprArrayFor(array, 0) + " ]";
    println(init);
}

printSpace(index : int, length : int){
    if(index < length - 1){
        " ";
    }else{
        "";
    }
}

stringRPNExprFromArrayFor(array : [RPNExpr], index : int){
    length : int = length(array);
    if(index < length){
        expr : RPNExpr = array[index];
        switch(expr){
                RPNInt(i) : {
                    i2s(i) + printSpace(index, length) + stringRPNExprFromArrayFor(array, index + 1);
                }
                RPNAdd() : {
                    "+" + printSpace(index, length) + stringRPNExprFromArrayFor(array, index + 1);
                }
                RPNSub() : {
                    "-" + printSpace(index, length) + stringRPNExprFromArrayFor(array, index + 1);
                }
                RPNMul() : {
                    "*" + printSpace(index, length) + stringRPNExprFromArrayFor(array, index + 1);
                }
                RPNDiv() : {
                    "/" + printSpace(index, length) + stringRPNExprFromArrayFor(array, index + 1);
                }
                RPNRecAdd() : {
                    "~" + printSpace(index, length) + stringRPNExprFromArrayFor(array, index + 1);
                }
            }
    }else{
        "";
    }
}

stringRPNExprFromArray(array : [RPNExpr]) -> string{
    ret : string = stringRPNExprFromArrayFor(array, 0);
    ret;
}
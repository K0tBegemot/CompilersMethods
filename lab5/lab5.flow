import runtime;
import string;
import ds/array;
import ds/tree;
import ds/tuples;
import lingo/pegcode/driver;
import Rational;
import ASTTree;
import RPN;

lingoGrammarOp : ref Maybe<[PegOp]> = ref None();

lingoGrammar(){
    onlyOnce(lingoGrammarOp, \ -> {
        compilePegGrammar("#include example.lingo");
    })
}

main(){
    // specialPegActions = {
    //     t1 = setTree(defaultPegActions.t, "FOOp", FOOp);
    //     t2 = setTree(t1, "SOOp", SOOp);
    //     SemanticActions(t2);
    // }
    // result : Expr = parsic(lingoGrammar(), "(1-2-3 * 10)/3", specialPegActions);
    // printAST(result);
    // text: string = createStringFromAST(result);
    // println(text);
    // printRational(calculateExpression(result));

    result : [RPNExpr] = createRPNArray();
    printRPNExprArray(result);
    println(stringRPNExprFromArray(result));
    ASTTree : Maybe<Expr> = createASTTreeFromRPNExprArray(result);
    switch(ASTTree){
        Some(expr) : {
            printAST(expr);
        }
        None() : {}
    }
}

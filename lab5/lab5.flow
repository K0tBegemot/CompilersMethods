import runtime;
import string;
import ds/array;
import ds/tree;
import ds/tuples;
import lingo/pegcode/driver;
import Rational;
import ASTTree;
import RPN;
import ExecutionContext;

main(){
    // printAST(result);
    // text: string = createStringFromAST(result);
    // println(text);
    // printRational(calculateExpression(result));

    result : Maybe<ExecutionContext> = createRPNExecutionContext();
    if(isSome(result)){
        resultValue : ExecutionContext = either(result, ExecutionContext(Some(Int(0)), makeTree()));
        printExecutionContext(resultValue);
        retValue : Rational = calculateExpression(resultValue);
        printRational(retValue);
    }else{
        println("@@@");
    }
    // println(stringRPNExprFromArray(result));
    // ASTTree : Maybe<Expr> = createASTTreeFromRPNExprArray(result);
    // switch(ASTTree){
    //     Some(expr) : {
    //         printAST(expr);
    //         rpnArray : [RPNExpr] = createRPNArrayFromASTTree(expr);
    //         printRPNExprArray(rpnArray);
    //         //printRational(calculateExpression(expr));
    //     }
    //     None() : {}
    // }
}
